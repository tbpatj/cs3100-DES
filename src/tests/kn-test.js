const assert = require("assert");
const { permutation } = require("../permutations");
const { PC2 } = require("../tables");
const { printAllBits } = require("../bit-operations");

const knAns = {
  K1: 0b000110110000001011101111111111000111000001110010n,
  K2: 0b011110011010111011011001110110111100100111100101n,
  K3: 0b010101011111110010001010010000101100111110011001n,
  K4: 0b011100101010110111010110110110110011010100011101n,
  K5: 0b011111001110110000000111111010110101001110101000n,
  K6: 0b011000111010010100111110010100000111101100101111n,
  K7: 0b111011001000010010110111111101100001100010111100n,
  K8: 0b111101111000101000111010110000010011101111111011n,
  K9: 0b111000001101101111101011111011011110011110000001n,
  K10: 0b101100011111001101000111101110100100011001001111n,
  K11: 0b001000010101111111010011110111101101001110000110n,
  K12: 0b011101010111000111110101100101000110011111101001n,
  K13: 0b100101111100010111010001111110101011101001000001n,
  K14: 0b010111110100001110110111111100101110011100111010n,
  K15: 0b101111111001000110001101001111010011111100001010n,
  K16: 0b110010110011110110001011000011100001011111110101n,
};

const knTest = (c, d, round) => {
  //the way they do the permutations means I need to bit shift the key over too 8 bits so it fills the 64 bit placeholding, cause idk who ever thought this was right???
  let key = (c << 28n) | d;
  //make sure to pass 56 as that is the number of bits we are working with
  let actual = permutation(PC2, key, 56);

  let expected = knAns[`K${round}`];
  try {
    assert.strictEqual(actual, expected, "Values do not match!");
    console.log(`✅ K${round} Test passed`);
  } catch (error) {
    console.error(`❌ K${round} Test failed:`, error.message);
  }
};

module.exports = { knTest };
